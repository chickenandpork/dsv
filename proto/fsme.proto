syntax = "proto3";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";

package fsm ;

message Transition {
	enum Code {
		// Retry when raised or returned causes an FSM step to re-enter on next pass
		Retry = 0;

		// Abort when raised or returned from a step causes the FSM to move to the
		// failed state
		Abort = 1;

		// Next when raised or returned causes the FSM to run the given state on next entry
		// -- effectively "transitioning" to the next state given as parameter #2 of the
		// enclosing message
		Next = 2;

		// Complete when raised or returned causes the FSM to move to the finished state,
		// but marking this as an intentional no-error completion of the FSM, not an error
		// condition
		Complete = 3;
	}
	Code code = 1;

	// on a Transition.Code == Next, the next Stage needs to be given.  If blank, the FSM moves
	// through the abort stage to the terminated state
	string nextStep = 2;
}

// Context is the immutable environment when an FSM starts
message Context {
	option (gorm.opts) = {
		ormable: true,
	};

	string Class = 1;
	//map<string, any> Parameters = 2;
	map<string, string> Parameters = 2;

	Transition.Code state = 3;

	// PIDs are UUIDs, so this is literally a UUID.String() from github.com/google/uuid
	string pid = 4;
	// Parent PID
	string ppid = 5;
}

// Mutable is the current writeable state of an FSM instance
message Mutable {
	// Step indicates which stage, state, or step is executed next
	string Step = 1;
	// Variables is a key/value map of state entities (interface{} <-- Any currently not working)
	map<string, string> Variables = 2;
}

